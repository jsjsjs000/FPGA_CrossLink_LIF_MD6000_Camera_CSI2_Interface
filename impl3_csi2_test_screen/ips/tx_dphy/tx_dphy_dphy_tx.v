// =============================================================================
// >>>>>>>>>>>>>>>>>>>>>>>>> COPYRIGHT NOTICE <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
// -----------------------------------------------------------------------------
//   Copyright (c) 2017 by Lattice Semiconductor Corporation
//   ALL RIGHTS RESERVED
// -----------------------------------------------------------------------------
//
//   Permission:
//
//      Lattice SG Pte. Ltd. grants permission to use this code
//      pursuant to the terms of the Lattice Reference Design License Agreement.
//
//
//   Disclaimer:
//
//      This VHDL or Verilog source code is intended as a design reference
//      which illustrates how these types of functions can be implemented.
//      It is the user's responsibility to verify their design for
//      consistency and functionality through the use of formal
//      verification methods.  Lattice provides no warranty
//      regarding the use or functionality of this code.
//
// -----------------------------------------------------------------------------
//
//                  Lattice SG Pte. Ltd.
//                  101 Thomson Road, United Square #07-02
//                  Singapore 307591
//
//
//                  TEL: 1-800-Lattice (USA and Canada)
//                       +65-6631-2000 (Singapore)
//                       +1-503-268-8001 (other locations)
//
//                  web: http://www.latticesemi.com/
//                  email: techsupport@latticesemi.com
//
// -----------------------------------------------------------------------------
//
// =============================================================================
//                         FILE DETAILS
// Project               : DPHY_TX
// File                  : dphy_tx.v
// Title                 : Top module for D-PHY Tx Sub-module IP
// Dependencies          : 1.
//                       : 2.
// Description           :
// =============================================================================
//                        REVISION HISTORY
// Version               : 1.0
// Author(s)             : Davit Tamazyan (IMT)
// Mod. Date             : 03/13/17
// Changes Made          : Initial Release.
// =============================================================================

//===========================================================================
// Verilog file generated by Clarity Designer    10/02/2024    19:39:36  
// Filename  : tx_dphy_dphy_tx.v                                                
// IP package: CSI-2/DSI D-PHY Transmitter 1.4                           
// Copyright(c) 2017 Lattice Semiconductor Corporation. All rights reserved. 
//===========================================================================

// `ifndef DPHY_TX
// `define DPHY_TX
module tx_dphy_dphy_tx #
// -----------------------------------------------------------------------------
// Module Parameters
// -----------------------------------------------------------------------------
(
parameter                     TX_GEAR           = 8,
parameter                     NUM_TX_LANE       = 4,
parameter                     TINIT_COUNT       = "ON",
parameter                     TINIT_VALUE       = 1000,
parameter                     USER_TIMING       = "OFF",
parameter                     T_LPX             = 1,
parameter                     T_CLKPREP         = 1,
parameter                     T_CLK_HSZERO      = 1,
parameter                     T_CLKPRE          = 1,
parameter                     T_CLKPOST         = 1,
parameter                     T_CLKTRAIL        = 1,
parameter                     T_CLKEXIT         = 1,
parameter                     T_DATPREP         = 1,
parameter                     T_DAT_HSZERO      = 1,
parameter                     T_DATTRAIL        = 1,
parameter                     T_DATEXIT         = 1,
parameter                     PKT_FORMATTER     = "ON",
parameter                     INTF_TYPE         = "CSI2",
parameter                     MISC              = "OFF",
parameter                     HS_DCS            = "OFF",
parameter                     FRAME_CNT_EN      = "OFF",
parameter                     LINE_CNT_EN       = "OFF",
parameter                     CLK_MODE          = "HS_ONLY",
parameter                     CM                = 8'b00000000,
parameter                     CN                = 8'b00000,
parameter                     CO                = 8'b000,
///                
parameter                     PKTHDR_FIFO_IMPL  = "EBR",           // FIFO implementation
parameter                     PKTHDR_FIFO_DEPTH = 64,          // FIFO implementation
parameter                     CRC16             = 1,           // Appends 16-bit checksum to the
parameter                     DATA_WIDTH        = 16,          // Always set to 16.
parameter                     TX_FREQ_TGT       = 50,
/// Internal                                    
parameter                     PKT_WIDTH         = TX_GEAR*NUM_TX_LANE
)
// -----------------------------------------------------------------------------
// Input/Output Ports
// -----------------------------------------------------------------------------
(

//------Common Interface Ports
input  wire                   ref_clk_i,                           // Pixel or refclk clock
input  wire                   reset_n_i,                           // Asynchronous reset
input  wire                   pd_dphy_i,                           // DPHY PD signal
//------Input packeted data
input  wire            [63:0] dphy_pkt_i,                          // Packet data
input  wire                   dphy_pkten_i,                        // Packet enable
//------Input byte data
input  wire            [63:0] byte_data_i,                         // Byte data
input  wire                   byte_data_en_i,                      // Byte data enable
//------CSI Interface Ports
input  wire                   sp_en_i,                             // Short packet enable
input  wire                   lp_en_i,                             // Long packet enable
input  wire             [7:0] frame_max_i,                         // Maximum number of frame
//------DSI Interface Ports
input  wire                   vsync_start_i,                       // Vsync start pulse
input  wire                   hsync_start_i,                       // Hsync start pulse
//------Packet Settings
input  wire             [1:0] vc_i,                                // Virtual channel
input  wire             [5:0] dt_i,                                // Data type
input  wire            [15:0] wc_i,                                // Word count
//------Debug Signals available if MISC_ON is defined
output wire                   tinit_done_o,                        // Tinit done
output wire                   pll_lock_o,                          // PLL clock lock signal
output wire                   pix2byte_rstn_o,                     // Pixel2byte FIFO reset
//------Handshaking for Rx/Tx
input  wire                   clk_hs_en_i,
input  wire                   d_hs_en_i,
output wire                   d_hs_rdy_o,
output wire                   ld_pyld_o,
output wire                   byte_clk_o,                          // Byte Clock
output wire                   c2d_ready_o,                         // Indicates that CMOS2DPHY is ready to receive data
//------DPHY ports
  // MIPI interface signals
  inout                       d0_p_io,        // D-PHY output data 0
  inout                       d0_n_io,        // D-PHY output data 0
  inout                       d1_p_o,         // D-PHY output data 1
  inout                       d1_n_o,         // D-PHY output data 1
inout  wire                   clk_p_o,                              // D-PHY output clock
inout  wire                   clk_n_o                               // D-PHY output clock
);

// -----------------------------------------------------------------------------
// Wire Declarations
// -----------------------------------------------------------------------------
wire                  core_rstn;
wire [63:0]           dphy_pkt_frmtr_w;
wire                  dphy_pkten_frmtr_w;
wire                  pix2byte_rstn_w;

wire                  done_w;
wire                  clk_hs_en_w;

wire                  hs_clk_gate_en_w;
wire                  hs_clk_en_w;
wire                  hs_data_en_w;

wire [DATA_WIDTH-1:0] hs_data_d3_w;
wire [DATA_WIDTH-1:0] hs_data_d2_w;
wire [DATA_WIDTH-1:0] hs_data_d1_w;
wire [DATA_WIDTH-1:0] hs_data_d0_w;

wire                  lp_clk_en_w;
wire                  lp_clk_p_w;
wire                  lp_clk_n_w;
wire                  lp_data_en_w;
wire                  lp_data_p_w;
wire                  lp_data_n_w;

// -----------------------------------------------------------------------------
// Assign Statements
// -----------------------------------------------------------------------------
assign pix2byte_rstn_o  = (MISC == "ON")? pix2byte_rstn_w : 1'd1;
// This was originally for DCS; equated directly to D-PHY PLL lock
assign clk_hs_en_w      = (CLK_MODE=="HS_ONLY")? done_w : clk_hs_en_i;
assign done_w           = pll_lock_o;


// -----------------------------------------------------------------------------
// Submodule Instantiations
// -----------------------------------------------------------------------------

///////////////////////////////////////////////////////////////
// Synchronize Reset Input
///////////////////////////////////////////////////////////////
tx_dphy_synchronizer sync_core_reset (
  .clk   (byte_clk_o),
  .rstn  (reset_n_i),
  .in    (reset_n_i & pll_lock_o),
  .out   (core_rstn)
);

tx_dphy_synchronizer sync_ref_reset (
  .clk   (ref_clk_i),
  .rstn  (reset_n_i),
  .in    (reset_n_i),
  .out   (ref_rstn)
);

///////////////////////////////////////////////////////////////
// packet formatter instance
///////////////////////////////////////////////////////////////
// It will not generate the pkt_formatter if input data already
// has the header and footer

generate
  if (PKT_FORMATTER == "ON") begin: GEN_PKT_FORMAT_ON
    tx_dphy_pkt_formatter
    pkt_formatter_inst (
      ///
      .reset_n         (core_rstn),
      .core_clk        (byte_clk_o),
      /// Header
      .vc_i            (vc_i),
      .dt_i            (dt_i),
      .wc_i            (wc_i),
      /// DSI Control
      .vsync_start_i   ((INTF_TYPE == "DSI")? vsync_start_i : 1'd1),
      .hsync_start_i   ((INTF_TYPE == "DSI")? hsync_start_i : 1'd1),
      /// CSI2 Control
      .sp_en_i         ((INTF_TYPE == "CSI2")? sp_en_i : 1'd1),
      .lp_en_i         ((INTF_TYPE == "CSI2")? lp_en_i : 1'd1),
      .frame_max_i     (frame_max_i),
      /// Byte Data
      .byte_data_i     (byte_data_i),
      .byte_data_en_i  (byte_data_en_i),
      ///
      .d_hs_rdy_i      (d_hs_rdy_o),
      .ld_pyld_o       (ld_pyld_o),
      .pix2byte_rstn_o (pix2byte_rstn_w),
    //------Interface to tx_global_operation
      .dphy_pkt_o      (dphy_pkt_frmtr_w),
      .dphy_pkten_o    (dphy_pkten_frmtr_w)
    );
  end
endgenerate

///////////////////////////////////////////////////////////////
// tx global operation instance
///////////////////////////////////////////////////////////////

tx_dphy_tx_global_operation
tx_global_operation_inst (
  .clk_hs_en_i      (clk_hs_en_w),
  .d_hs_en_i        (d_hs_en_i),
  .d_hs_rdy_o       (d_hs_rdy_o),

  .reset_n          (core_rstn),
  .core_clk         (byte_clk_o),

  .dphy_pkten_i     ((PKT_FORMATTER == "ON")? dphy_pkten_frmtr_w: dphy_pkten_i),
  .dphy_pkt_i       ((PKT_FORMATTER == "ON")? dphy_pkt_frmtr_w  : dphy_pkt_i),

  //------Interface to dci_wrapper
  // HS i/f
  .hs_clk_gate_en_o (hs_clk_gate_en_w),
  .hs_clk_en_o      (hs_clk_en_w),
  .hs_data_en_o     (hs_data_en_w),
  .hs_data_d3_o     (hs_data_d3_w),
  .hs_data_d2_o     (hs_data_d2_w),
  .hs_data_d1_o     (hs_data_d1_w),
  .hs_data_d0_o     (hs_data_d0_w),
  ///
  .c2d_ready_o      (c2d_ready_o), // Not used; duplicate use with d_hs_rdy_o
  // LP i/f
  .lp_clk_en_o      (lp_clk_en_w),
  .lp_clk_p_o       (lp_clk_p_w),
  .lp_clk_n_o       (lp_clk_n_w),
  .lp_data_en_o     (lp_data_en_w),
  .lp_data_p_o      (lp_data_p_w),
  .lp_data_n_o      (lp_data_n_w)
);

///////////////////////////////////////////////////////////////
// dci_wrapper instance
///////////////////////////////////////////////////////////////

tx_dphy_dci_wrapper # (
  .NUM_TX_LANE (2),
  .DATA_WIDTH  (16),
  .TX_GEAR     (8),
  .CN          (5'd31),
  .CM          (8'd192),
  .CO          (2'd2)
)
dci_wrapper_inst   (
  .refclk          (ref_clk_i),
  .reset_n         (ref_rstn),

  // MIPI interface signals
  .clk_p_o         (clk_p_o),
  .clk_n_o         (clk_n_o),
  // MIPI interface signals
  .d0_p_io         (d0_p_io),        // D-PHY output data 0
  .d0_n_io         (d0_n_io),        // D-PHY output data 0
  .d1_p_o          (d1_p_o),         // D-PHY output data 1
  .d1_n_o          (d1_n_o),         // D-PHY output data 1

  // high-speed transmit signals
  .txbyte_clkhs_o  (byte_clk_o),
  .pll_lock_o      (pll_lock_o),
  .txclk_hsen_i    (hs_clk_en_w & done_w),
  .txclk_hsgate_i  (hs_clk_gate_en_w),
  .pd_dphy_i       (pd_dphy_i),

  .dl3_txdata_hs_i    ((NUM_TX_LANE > 3)? hs_data_d3_w : 16'd0),
  .dl2_txdata_hs_i    ((NUM_TX_LANE > 2)? hs_data_d2_w : 16'd0),
  .dl1_txdata_hs_i    ((NUM_TX_LANE > 1)? hs_data_d1_w : 16'd0),
  .dl0_txdata_hs_i    ((NUM_TX_LANE > 0)? hs_data_d0_w : 16'd0),

  .dl3_txdata_hs_en_i ((NUM_TX_LANE > 3)? (hs_data_en_w & done_w) : 1'd0),
  .dl2_txdata_hs_en_i ((NUM_TX_LANE > 2)? (hs_data_en_w & done_w) : 1'd0),
  .dl1_txdata_hs_en_i ((NUM_TX_LANE > 1)? (hs_data_en_w & done_w) : 1'd0),
  .dl0_txdata_hs_en_i ((HS_DCS == "OFF")? (hs_data_en_w & done_w) : hs_data_en_w),

  // low-power transmit signals
  .txclk_lp_p_i       (done_w ? lp_clk_p_w : 1'b1),
  .txclk_lp_n_i       (done_w ? lp_clk_n_w : 1'b1),
  .clk_lpen_i         (done_w ? lp_clk_en_w : 1'b1),
  ///
  .dl3_txdata_lp_p_i  ((NUM_TX_LANE > 3)? ((done_w)? lp_data_p_w : 1'b1) : 1'd0),
  .dl3_txdata_lp_n_i  ((NUM_TX_LANE > 3)? ((done_w)? lp_data_n_w : 1'b1) : 1'd0),
  .dl2_txdata_lp_p_i  ((NUM_TX_LANE > 2)? ((done_w)? lp_data_p_w : 1'b1) : 1'd0),
  .dl2_txdata_lp_n_i  ((NUM_TX_LANE > 2)? ((done_w)? lp_data_n_w : 1'b1) : 1'd0),
  .dl1_txdata_lp_p_i  ((NUM_TX_LANE > 1)? ((done_w)? lp_data_p_w : 1'b1) : 1'd0),
  .dl1_txdata_lp_n_i  ((NUM_TX_LANE > 1)? ((done_w)? lp_data_n_w : 1'b1) : 1'd0),
  .dl0_txdata_lp_p_i  ((NUM_TX_LANE > 0)? ((done_w)? lp_data_p_w : 1'b1) : 1'd0),
  .dl0_txdata_lp_n_i  ((NUM_TX_LANE > 0)? ((done_w)? lp_data_n_w : 1'b1) : 1'd0),

  .dl3_txdata_lp_en_i ((NUM_TX_LANE > 3)? ((done_w)? lp_data_en_w : 1'b1) : 1'd0),
  .dl2_txdata_lp_en_i ((NUM_TX_LANE > 2)? ((done_w)? lp_data_en_w : 1'b1) : 1'd0),
  .dl1_txdata_lp_en_i ((NUM_TX_LANE > 1)? ((done_w)? lp_data_en_w : 1'b1) : 1'd0),
  .dl0_txdata_lp_en_i ((NUM_TX_LANE > 0)? ((done_w)? lp_data_en_w : 1'b1) : 1'd0),


  // Not use - in case to support bus turn-around
  .rxclk_lp_p_o       (),
  .rxclk_lp_n_o       (),
  .dl0_rxdata_lp_p_o  (),
  .dl0_rxdata_lp_n_o  ()
);

///////////////////////////////////////////////////////////////
// Tinit counter instance
///////////////////////////////////////////////////////////////
generate
if (TINIT_COUNT == "ON") begin: GEN_TINIT_COUNT_ON
  tx_dphy_tinit_count 
  tinit_count_inst(
    .clk          (byte_clk_o),
    .resetn       (core_rstn),
    .tinit_done_o (tinit_done_o)
  );
end
else begin: GEN_TINIT_COUNT_OFF
  assign tinit_done_o = pll_lock_o;
end
endgenerate

endmodule
//==============================================================================
// dphy_tx.v
//==============================================================================
// `endif


