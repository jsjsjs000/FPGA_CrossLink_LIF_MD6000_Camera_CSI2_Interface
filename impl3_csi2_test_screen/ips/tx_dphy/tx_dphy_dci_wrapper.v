// --------------------------------------------------------------------
// >>>>>>>>>>>>>>>>>>>>>>>>> COPYRIGHT NOTICE <<<<<<<<<<<<<<<<<<<<<<<<<
// --------------------------------------------------------------------
// Copyright (c) 2013 by Lattice Semiconductor Corporation
// --------------------------------------------------------------------
//
// Permission:
//
//   Lattice Semiconductor grants permission to use this code for use
//   in synthesis for any Lattice programmable logic product.  Other
//   use of this code, including the selling or duplication of any
//   portion is strictly prohibited.
//
// Disclaimer:
//
//   This VHDL or Verilog source code is intended as a design reference
//   which illustrates how these types of functions can be implemented.
//   It is the user's responsibility to verify their design for
//   consistency and functionality through the use of formal
//   verification methods.  Lattice Semiconductor provides no warranty
//   regarding the use or functionality of this code.
//
// --------------------------------------------------------------------
//
//                     Lattice Semiconductor Corporation
//                     5555 NE Moore Court
//                     Hillsboro, OR 97214
//                     U.S.A
//
//                     TEL: 1-800-Lattice (USA and Canada)
//                          408-826-6000 (other locations)
//
//                     web: http://www.latticesemi.com/
//                     email: techsupport@latticesemi.com
//
// --------------------------------------------------------------------
//
// dci_wrapper.v -- it instantiates Mixel hard IP and control logic to
// tx global operation.
//
// --------------------------------------------------------------------
//
// Revision History :
// --------------------------------------------------------------------
//   Ver  :| Author            :| Mod. Date :| Changes Made:
//   V1.0 :| Henry Tso         :| 01/05/15  :| Initial Release
// --------------------------------------------------------------------
//`define MIXEL_MODEL

//===========================================================================
// Verilog file generated by Clarity Designer    10/02/2024    19:39:36  
// Filename  : tx_dphy_dci_wrapper.v                                                
// IP package: CSI-2/DSI D-PHY Transmitter 1.4                           
// Copyright(c) 2017 Lattice Semiconductor Corporation. All rights reserved. 
//===========================================================================


module tx_dphy_dci_wrapper #(
  parameter           NUM_TX_LANE = 4,
  parameter           DATA_WIDTH  = 16,
  parameter           TX_GEAR     = 16,
  parameter           CN          = 0,
  parameter           CM          = 0,
  parameter           CO          = 0
)
(
  // clock and reset
  input                   refclk,
  input                   reset_n,

  // MIPI interface signals
  inout                   clk_p_o,
  inout                   clk_n_o,
  inout                   d0_p_io,        // D-PHY output data 0
  inout                   d0_n_io,        // D-PHY output data 0
  inout                   d1_p_o,         // D-PHY output data 1
  inout                   d1_n_o,         // D-PHY output data 1

  // high-speed transmit signals
  output                  txbyte_clkhs_o,
  output                  pll_lock_o,

  input                   txclk_hsen_i,
  input                   txclk_hsgate_i,
  input                   pd_dphy_i,

  // Mixel PLL programming values
  //input [4:0]				cn_i,
  //input [7:0]				cm_i,
  //input [1:0]				co_i,

  input [DATA_WIDTH-1:0]  dl3_txdata_hs_i,
  input [DATA_WIDTH-1:0]  dl2_txdata_hs_i,
  input [DATA_WIDTH-1:0]  dl1_txdata_hs_i,
  input [DATA_WIDTH-1:0]  dl0_txdata_hs_i,
  input                   dl3_txdata_hs_en_i,
  input                   dl2_txdata_hs_en_i,
  input                   dl1_txdata_hs_en_i,
  input                   dl0_txdata_hs_en_i,

  // low-power transmit signals
  input                   txclk_lp_p_i,
  input                   txclk_lp_n_i,
  input                   clk_lpen_i,
                          
  input                   dl3_txdata_lp_p_i,
  input                   dl3_txdata_lp_n_i,
  input                   dl2_txdata_lp_p_i,
  input                   dl2_txdata_lp_n_i,
  input                   dl1_txdata_lp_p_i,
  input                   dl1_txdata_lp_n_i,
  input                   dl0_txdata_lp_p_i,
  input                   dl0_txdata_lp_n_i,
  input                   dl3_txdata_lp_en_i,
  input                   dl2_txdata_lp_en_i,
  input                   dl1_txdata_lp_en_i,
  input                   dl0_txdata_lp_en_i,

  // Not use - in case to support bus turn-around
  output                  rxclk_lp_p_o,
  output                  rxclk_lp_n_o,
  output                  dl0_rxdata_lp_p_o,
  output                  dl0_rxdata_lp_n_o
);

//------------------------
// reg declarations
//------------------------

reg                       txclk_hsen_q;       
reg                       txclk_hsgate_q;     
reg [DATA_WIDTH-1:0]      dl3_txdata_hs_q;    
reg [DATA_WIDTH-1:0]      dl2_txdata_hs_q;    
reg [DATA_WIDTH-1:0]      dl1_txdata_hs_q;    
reg [DATA_WIDTH-1:0]      dl0_txdata_hs_q;    
reg                       dl3_txdata_hs_en_q; 
reg                       dl2_txdata_hs_en_q; 
reg                       dl1_txdata_hs_en_q; 
reg                       dl0_txdata_hs_en_q; 
reg                       txclk_lp_p_q;      
reg                       txclk_lp_n_q;      
reg                       clk_lpen_q;        
reg                       dl3_txdata_lp_p_q; 
reg                       dl3_txdata_lp_n_q; 
reg                       dl2_txdata_lp_p_q; 
reg                       dl2_txdata_lp_n_q; 
reg                       dl1_txdata_lp_p_q; 
reg                       dl1_txdata_lp_n_q; 
reg                       dl0_txdata_lp_p_q; 
reg                       dl0_txdata_lp_n_q; 
reg                       dl3_txdata_lp_en_q;
reg                       dl2_txdata_lp_en_q;
reg                       dl1_txdata_lp_en_q;
reg                       dl0_txdata_lp_en_q;

//------------------------------------------
//register signals from fabric going to hard DPHY
//------------------------------------------

// HS signals
always @(posedge txbyte_clkhs_o or negedge reset_n) begin
  if (!reset_n) begin
    txclk_hsen_q        <=   1'b0;
    txclk_hsgate_q      <=   1'b0;
    dl3_txdata_hs_q     <=   {DATA_WIDTH{1'b1}}; 
    dl2_txdata_hs_q     <=   {DATA_WIDTH{1'b1}};
    dl1_txdata_hs_q     <=   {DATA_WIDTH{1'b1}};
    dl0_txdata_hs_q     <=   {DATA_WIDTH{1'b1}};
    dl3_txdata_hs_en_q  <=   1'b0;
    dl2_txdata_hs_en_q  <=   1'b0;
    dl1_txdata_hs_en_q  <=   1'b0;
    dl0_txdata_hs_en_q  <=   1'b0; 
  end
  else begin
    txclk_hsen_q        <=   txclk_hsen_i;
    txclk_hsgate_q      <=   txclk_hsgate_i;
    dl3_txdata_hs_q     <=   dl3_txdata_hs_i;
    dl2_txdata_hs_q     <=   dl2_txdata_hs_i;
    dl1_txdata_hs_q     <=   dl1_txdata_hs_i;
    dl0_txdata_hs_q     <=   dl0_txdata_hs_i;
    dl3_txdata_hs_en_q  <=   dl3_txdata_hs_en_i;
    dl2_txdata_hs_en_q  <=   dl2_txdata_hs_en_i;
    dl1_txdata_hs_en_q  <=   dl1_txdata_hs_en_i;
    dl0_txdata_hs_en_q  <=   dl0_txdata_hs_en_i;
  end
end

//LP signals
always @(posedge txbyte_clkhs_o or negedge reset_n) begin
  if (!reset_n) begin
    txclk_lp_p_q        <=   1'b1;
    txclk_lp_n_q        <=   1'b1;
    clk_lpen_q          <=   1'b1; 
    dl3_txdata_lp_p_q   <=   1'b1;
    dl3_txdata_lp_n_q   <=   1'b1;
    dl2_txdata_lp_p_q   <=   1'b1;
    dl2_txdata_lp_n_q   <=   1'b1;
    dl1_txdata_lp_p_q   <=   1'b1;
    dl1_txdata_lp_n_q   <=   1'b1;
    dl0_txdata_lp_p_q   <=   1'b1;
    dl0_txdata_lp_n_q   <=   1'b1;
    dl3_txdata_lp_en_q  <=   1'b1;
    dl2_txdata_lp_en_q  <=   1'b1;
    dl1_txdata_lp_en_q  <=   1'b1;
    dl0_txdata_lp_en_q  <=   1'b1;   
  end
  else begin
    txclk_lp_p_q        <=   txclk_lp_p_i;
    txclk_lp_n_q        <=   txclk_lp_n_i;
    clk_lpen_q          <=   clk_lpen_i; 
    dl3_txdata_lp_p_q   <=   dl3_txdata_lp_p_i;
    dl3_txdata_lp_n_q   <=   dl3_txdata_lp_n_i;
    dl2_txdata_lp_p_q   <=   dl2_txdata_lp_p_i;
    dl2_txdata_lp_n_q   <=   dl2_txdata_lp_n_i;
    dl1_txdata_lp_p_q   <=   dl1_txdata_lp_p_i;
    dl1_txdata_lp_n_q   <=   dl1_txdata_lp_n_i;
    dl0_txdata_lp_p_q   <=   dl0_txdata_lp_p_i;
    dl0_txdata_lp_n_q   <=   dl0_txdata_lp_n_i;
    dl3_txdata_lp_en_q  <=   dl3_txdata_lp_en_i;
    dl2_txdata_lp_en_q  <=   dl2_txdata_lp_en_i;
    dl1_txdata_lp_en_q  <=   dl1_txdata_lp_en_i;
    dl0_txdata_lp_en_q  <=   dl0_txdata_lp_en_i;   
  end
end

// MIPI Mixel DPHY primitive instance
MIPIDPHYA # (
  .HSEL        (1),
  .HS_16BIT_EN ((TX_GEAR == 16)? 1'd1 : 1'd0),
  .CN          (CN),
  .CM          (CM),
  .CO          (CO),
  .PLL_TST     (9),
  .ENP_DESER   (0)
)
MIPIDPHYA_inst (
  .CKP          (clk_p_o),
  .CKN          (clk_n_o),
  .CLKHSBYTE    (),
  .CLKRXHSEN    (1'b0),
  .CLKDRXLPP    (),
  .CLKRXLPEN    (1'b0),
  .CLKDRXLPN    (),
  .CLKCDEN      (1'b0),
  .CLKDCDN      (),
  .CLKDTXLPP    (txclk_lp_p_q),  //(txclk_lp_p_i),
  .CLKTXLPEN    (clk_lpen_q),    //(clk_lpen_i),
  .CLKDTXLPN    (txclk_lp_n_q),  //(txclk_lp_n_i),
  .CLKTXHSEN    (txclk_hsen_q),  //(txclk_hsen_i),
  .CLKTXHSGATE  (txclk_hsgate_q),//(txclk_hsgate_i),
  .CLKTXHSPD    (1'b0),
  .CLKDRXHS     (),
  .HSBYTECLKS   (txbyte_clkhs_o),
  .LBEN         (1'b0),
  .PDDPHY       (pd_dphy_i | !pll_lock_o),
  .PDBIAS       (1'b0),
  .PDCKG        (1'b0),
  .CLKREF       (refclk),
  .LOCK         (pll_lock_o),
  .PDPLL        (~reset_n),

//////////////////////////////////////////////////////////////////////////////////
/// • Intermotion Technology
/// • DPHY Tx Changes
/// • Date August 8, 2019
/// • Davit Tamazyan
/// • Used TCL defines to resolve synthesis issue.
//////////////////////////////////////////////////////////////////////////////////
  .DP3          (),
  .DN3          (),
  .DP2          (),
  .DN2          (),
  .DP1          (d1_p_o),
  .DN1          (d1_n_o),
  .DP0          (d0_p_io),
  .DN0          (d0_n_io),
//Lane 0
  .D0DRXLPP     (),
  .D0RXLPEN     (1'b0),
  .D0DRXLPN     (),
  .D0DCDP       (),
  .D0CDEN       (1'b0),
  .D0DCDN       (),

  .D0DTXLPP     (dl0_txdata_lp_p_q), //(dl0_txdata_lp_p_i),
  .D0TXLPEN     (dl0_txdata_lp_en_q),//(dl0_txdata_lp_en_i),
  .D0DTXLPN     (dl0_txdata_lp_n_q), //(dl0_txdata_lp_n_i),
  .D0RXHSEN     (1'b0),

  .D0HSRXDATA15 (),
  .D0HSRXDATA14 (),
  .D0HSRXDATA13 (),
  .D0HSRXDATA12 (),
  .D0HSRXDATA11 (),
  .D0HSRXDATA10 (),
  .D0HSRXDATA9  (),
  .D0HSRXDATA8  (),
  .D0HSRXDATA7  (),
  .D0HSRXDATA6  (),
  .D0HSRXDATA5  (),
  .D0HSRXDATA4  (),
  .D0HSRXDATA3  (),
  .D0HSRXDATA2  (),
  .D0HSRXDATA1  (),
  .D0SYNC       (),
  .D0ERRSYNC    (),
  .D0NOSYNC     (),
  .D0HSDESEREN  (1'b1),

  .D0TXHSEN     (dl0_txdata_hs_en_q),                 //(dl0_txdata_hs_en_i),
  .D0HSTXDATA15 (dl0_txdata_hs_q[DATA_WIDTH-1]),      //(dl0_txdata_hs_i[DATA_WIDTH-1]),
  .D0HSTXDATA14 (dl0_txdata_hs_q[DATA_WIDTH-2]),      //(dl0_txdata_hs_i[DATA_WIDTH-2]),
  .D0HSTXDATA13 (dl0_txdata_hs_q[DATA_WIDTH-3]),      //(dl0_txdata_hs_i[DATA_WIDTH-3]),
  .D0HSTXDATA12 (dl0_txdata_hs_q[DATA_WIDTH-4]),      //(dl0_txdata_hs_i[DATA_WIDTH-4]),
  .D0HSTXDATA11 (dl0_txdata_hs_q[DATA_WIDTH-5]),      //(dl0_txdata_hs_i[DATA_WIDTH-5]),
  .D0HSTXDATA10 (dl0_txdata_hs_q[DATA_WIDTH-6]),      //(dl0_txdata_hs_i[DATA_WIDTH-6]),
  .D0HSTXDATA9  (dl0_txdata_hs_q[DATA_WIDTH-7]),      //(dl0_txdata_hs_i[DATA_WIDTH-7]),
  .D0HSTXDATA8  (dl0_txdata_hs_q[DATA_WIDTH-8]),      //(dl0_txdata_hs_i[DATA_WIDTH-8]),
  .D0HSTXDATA7  (dl0_txdata_hs_q[DATA_WIDTH-9]),      //(dl0_txdata_hs_i[DATA_WIDTH-9]),
  .D0HSTXDATA6  (dl0_txdata_hs_q[DATA_WIDTH-10]),     //(dl0_txdata_hs_i[DATA_WIDTH-10]),
  .D0HSTXDATA5  (dl0_txdata_hs_q[DATA_WIDTH-11]),     //(dl0_txdata_hs_i[DATA_WIDTH-11]),
  .D0HSTXDATA4  (dl0_txdata_hs_q[DATA_WIDTH-12]),     //(dl0_txdata_hs_i[DATA_WIDTH-12]),
  .D0HSTXDATA3  (dl0_txdata_hs_q[DATA_WIDTH-13]),     //(dl0_txdata_hs_i[DATA_WIDTH-13]),
  .D0HSTXDATA2  (dl0_txdata_hs_q[DATA_WIDTH-14]),     //(dl0_txdata_hs_i[DATA_WIDTH-14]),
  .D0HSTXDATA1  (dl0_txdata_hs_q[DATA_WIDTH-15]),     //(dl0_txdata_hs_i[DATA_WIDTH-15]),
  .D0HSTXDATA0  (dl0_txdata_hs_q[DATA_WIDTH-16]),     //(dl0_txdata_hs_i[DATA_WIDTH-16]),

  .D0HSSEREN    (1'b1),
  .D0TXHSPD     (1'b0),
  .D0DRXHS      (),

//Lane 1
  .D1DRXLPP     (),
  .D1RXLPEN     (1'b0),
  .D1DRXLPN     (),
  .D1DCDP       (),
  .D1CDEN       (1'b0),
  .D1DCDN       (),
  .D1DTXLPP     ((NUM_TX_LANE == 1)? 1'b0 : dl1_txdata_lp_p_q),    
  .D1TXLPEN     ((NUM_TX_LANE == 1)? 1'b0 : dl1_txdata_lp_en_q),   
  .D1DTXLPN     ((NUM_TX_LANE == 1)? 1'b0 : dl1_txdata_lp_n_q),    
  .D1RXHSEN     (1'b0),

  .D1HSRXDATA15 (),
  .D1HSRXDATA14 (),
  .D1HSRXDATA13 (),
  .D1HSRXDATA12 (),
  .D1HSRXDATA11 (),
  .D1HSRXDATA10 (),
  .D1HSRXDATA9  (),
  .D1HSRXDATA8  (),
  .D1HSRXDATA7  (),
  .D1HSRXDATA6  (),
  .D1HSRXDATA5  (),
  .D1HSRXDATA4  (),
  .D1HSRXDATA3  (),
  .D1HSRXDATA2  (),
  .D1HSRXDATA1  (),
  .D1HSRXDATA0  (),
  .D1SYNC       (),
  .D1ERRSYNC    (),
  .D1NOSYNC     (),

  .D1HSDESEREN  ((NUM_TX_LANE > 1)? 1'b1                           : 'd0),
  .D1TXHSEN     ((NUM_TX_LANE > 1)? dl1_txdata_hs_en_q             : 'd0),
  .D1HSTXDATA15 ((NUM_TX_LANE > 1)? dl1_txdata_hs_q[DATA_WIDTH-1]  : 'd0),
  .D1HSTXDATA14 ((NUM_TX_LANE > 1)? dl1_txdata_hs_q[DATA_WIDTH-2]  : 'd0),
  .D1HSTXDATA13 ((NUM_TX_LANE > 1)? dl1_txdata_hs_q[DATA_WIDTH-3]  : 'd0),
  .D1HSTXDATA12 ((NUM_TX_LANE > 1)? dl1_txdata_hs_q[DATA_WIDTH-4]  : 'd0),
  .D1HSTXDATA11 ((NUM_TX_LANE > 1)? dl1_txdata_hs_q[DATA_WIDTH-5]  : 'd0),
  .D1HSTXDATA10 ((NUM_TX_LANE > 1)? dl1_txdata_hs_q[DATA_WIDTH-6]  : 'd0),
  .D1HSTXDATA9  ((NUM_TX_LANE > 1)? dl1_txdata_hs_q[DATA_WIDTH-7]  : 'd0),
  .D1HSTXDATA8  ((NUM_TX_LANE > 1)? dl1_txdata_hs_q[DATA_WIDTH-8]  : 'd0),
  .D1HSTXDATA7  ((NUM_TX_LANE > 1)? dl1_txdata_hs_q[DATA_WIDTH-9]  : 'd0),
  .D1HSTXDATA6  ((NUM_TX_LANE > 1)? dl1_txdata_hs_q[DATA_WIDTH-10] : 'd0),
  .D1HSTXDATA5  ((NUM_TX_LANE > 1)? dl1_txdata_hs_q[DATA_WIDTH-11] : 'd0),
  .D1HSTXDATA4  ((NUM_TX_LANE > 1)? dl1_txdata_hs_q[DATA_WIDTH-12] : 'd0),
  .D1HSTXDATA3  ((NUM_TX_LANE > 1)? dl1_txdata_hs_q[DATA_WIDTH-13] : 'd0),
  .D1HSTXDATA2  ((NUM_TX_LANE > 1)? dl1_txdata_hs_q[DATA_WIDTH-14] : 'd0),
  .D1HSTXDATA1  ((NUM_TX_LANE > 1)? dl1_txdata_hs_q[DATA_WIDTH-15] : 'd0),
  .D1HSTXDATA0  ((NUM_TX_LANE > 1)? dl1_txdata_hs_q[DATA_WIDTH-16] : 'd0),

  .D1HSSEREN    ((NUM_TX_LANE > 1)? 1'b1 : 1'd0),

  .D1TXHSPD     (1'b0),
  .D1DRXHS      (),

//Lane 2
  .D2DRXLPP     (),
  .D2RXLPEN     (1'b0),
  .D2DRXLPN     (),
  .D2DCDP       (),
  .D2CDEN       (1'b0),
  .D2DCDN       (),

  .D2DTXLPP     ((NUM_TX_LANE > 2)? dl2_txdata_lp_p_q  : 1'd0),
  .D2TXLPEN     ((NUM_TX_LANE > 2)? dl2_txdata_lp_en_q : 1'd0),
  .D2DTXLPN     ((NUM_TX_LANE > 2)? dl2_txdata_lp_n_q  : 1'd0),
  .D2RXHSEN     (1'b0),

  .D2HSRXDATA15 (),
  .D2HSRXDATA14 (),
  .D2HSRXDATA13 (),
  .D2HSRXDATA12 (),
  .D2HSRXDATA11 (),
  .D2HSRXDATA10 (),
  .D2HSRXDATA9  (),
  .D2HSRXDATA8  (),
  .D2HSRXDATA7  (),
  .D2HSRXDATA6  (),
  .D2HSRXDATA5  (),
  .D2HSRXDATA4  (),
  .D2HSRXDATA3  (),
  .D2HSRXDATA2  (),
  .D2HSRXDATA1  (),
  .D2HSRXDATA0  (),
  .D2SYNC       (),
  .D2ERRSYNC    (),
  .D2NOSYNC     (),
  .D2HSDESEREN  ((NUM_TX_LANE > 2)? 1'b1                           : 'd0),
  .D2TXHSEN     ((NUM_TX_LANE > 2)? dl2_txdata_hs_en_q             : 'd0),
  .D2HSTXDATA15 ((NUM_TX_LANE > 2)? dl2_txdata_hs_q[DATA_WIDTH-1]  : 'd0),
  .D2HSTXDATA14 ((NUM_TX_LANE > 2)? dl2_txdata_hs_q[DATA_WIDTH-2]  : 'd0),
  .D2HSTXDATA13 ((NUM_TX_LANE > 2)? dl2_txdata_hs_q[DATA_WIDTH-3]  : 'd0),
  .D2HSTXDATA12 ((NUM_TX_LANE > 2)? dl2_txdata_hs_q[DATA_WIDTH-4]  : 'd0),
  .D2HSTXDATA11 ((NUM_TX_LANE > 2)? dl2_txdata_hs_q[DATA_WIDTH-5]  : 'd0),
  .D2HSTXDATA10 ((NUM_TX_LANE > 2)? dl2_txdata_hs_q[DATA_WIDTH-6]  : 'd0),
  .D2HSTXDATA9  ((NUM_TX_LANE > 2)? dl2_txdata_hs_q[DATA_WIDTH-7]  : 'd0),
  .D2HSTXDATA8  ((NUM_TX_LANE > 2)? dl2_txdata_hs_q[DATA_WIDTH-8]  : 'd0),
  .D2HSTXDATA7  ((NUM_TX_LANE > 2)? dl2_txdata_hs_q[DATA_WIDTH-9]  : 'd0),
  .D2HSTXDATA6  ((NUM_TX_LANE > 2)? dl2_txdata_hs_q[DATA_WIDTH-10] : 'd0),
  .D2HSTXDATA5  ((NUM_TX_LANE > 2)? dl2_txdata_hs_q[DATA_WIDTH-11] : 'd0),
  .D2HSTXDATA4  ((NUM_TX_LANE > 2)? dl2_txdata_hs_q[DATA_WIDTH-12] : 'd0),
  .D2HSTXDATA3  ((NUM_TX_LANE > 2)? dl2_txdata_hs_q[DATA_WIDTH-13] : 'd0),
  .D2HSTXDATA2  ((NUM_TX_LANE > 2)? dl2_txdata_hs_q[DATA_WIDTH-14] : 'd0),
  .D2HSTXDATA1  ((NUM_TX_LANE > 2)? dl2_txdata_hs_q[DATA_WIDTH-15] : 'd0),
  .D2HSTXDATA0  ((NUM_TX_LANE > 2)? dl2_txdata_hs_q[DATA_WIDTH-16] : 'd0),

  .D2HSSEREN    ((NUM_TX_LANE > 2)? 1'b1 : 1'd0),

  .D2TXHSPD      (1'b0),
  .D2DRXHS       (),

//Lane 3
  .D3DRXLPP      (),
  .D3RXLPEN      (1'b0),
  .D3DRXLPN      (),
  .D3DCDP        (),
  .D3CDEN        (1'b0),
  .D3DCDN        (),
  .D3DTXLPP      ((NUM_TX_LANE > 3)? dl3_txdata_lp_p_q  : 1'd0),
  .D3TXLPEN      ((NUM_TX_LANE > 3)? dl3_txdata_lp_en_q : 1'd0),
  .D3DTXLPN      ((NUM_TX_LANE > 3)? dl3_txdata_lp_n_q  : 1'd0),
  .D3RXHSEN      (1'b0),

  .D3HSRXDATA15  (),
  .D3HSRXDATA14  (),
  .D3HSRXDATA13  (),
  .D3HSRXDATA12  (),
  .D3HSRXDATA11  (),
  .D3HSRXDATA10  (),
  .D3HSRXDATA9   (),
  .D3HSRXDATA8   (),
  .D3HSRXDATA7   (),
  .D3HSRXDATA6   (),
  .D3HSRXDATA5   (),
  .D3HSRXDATA4   (),
  .D3HSRXDATA3   (),
  .D3HSRXDATA2   (),
  .D3HSRXDATA1   (),
  .D3HSRXDATA0   (),
  .D3SYNC        (),
  .D3ERRSYNC     (),
  .D3NOSYNC      (),
  .D3HSDESEREN   ((NUM_TX_LANE > 3)? 1'b1                           : 'd0),
  .D3TXHSEN      ((NUM_TX_LANE > 3)? dl3_txdata_hs_en_q             : 'd0),
  .D3HSTXDATA15  ((NUM_TX_LANE > 3)? dl3_txdata_hs_q[DATA_WIDTH-1]  : 'd0),
  .D3HSTXDATA14  ((NUM_TX_LANE > 3)? dl3_txdata_hs_q[DATA_WIDTH-2]  : 'd0),
  .D3HSTXDATA13  ((NUM_TX_LANE > 3)? dl3_txdata_hs_q[DATA_WIDTH-3]  : 'd0),
  .D3HSTXDATA12  ((NUM_TX_LANE > 3)? dl3_txdata_hs_q[DATA_WIDTH-4]  : 'd0),
  .D3HSTXDATA11  ((NUM_TX_LANE > 3)? dl3_txdata_hs_q[DATA_WIDTH-5]  : 'd0),
  .D3HSTXDATA10  ((NUM_TX_LANE > 3)? dl3_txdata_hs_q[DATA_WIDTH-6]  : 'd0),
  .D3HSTXDATA9   ((NUM_TX_LANE > 3)? dl3_txdata_hs_q[DATA_WIDTH-7]  : 'd0),
  .D3HSTXDATA8   ((NUM_TX_LANE > 3)? dl3_txdata_hs_q[DATA_WIDTH-8]  : 'd0),
  .D3HSTXDATA7   ((NUM_TX_LANE > 3)? dl3_txdata_hs_q[DATA_WIDTH-9]  : 'd0),
  .D3HSTXDATA6   ((NUM_TX_LANE > 3)? dl3_txdata_hs_q[DATA_WIDTH-10] : 'd0),
  .D3HSTXDATA5   ((NUM_TX_LANE > 3)? dl3_txdata_hs_q[DATA_WIDTH-11] : 'd0),
  .D3HSTXDATA4   ((NUM_TX_LANE > 3)? dl3_txdata_hs_q[DATA_WIDTH-12] : 'd0),
  .D3HSTXDATA3   ((NUM_TX_LANE > 3)? dl3_txdata_hs_q[DATA_WIDTH-13] : 'd0),
  .D3HSTXDATA2   ((NUM_TX_LANE > 3)? dl3_txdata_hs_q[DATA_WIDTH-14] : 'd0),
  .D3HSTXDATA1   ((NUM_TX_LANE > 3)? dl3_txdata_hs_q[DATA_WIDTH-15] : 'd0),
  .D3HSTXDATA0   ((NUM_TX_LANE > 3)? dl3_txdata_hs_q[DATA_WIDTH-16] : 'd0),
  .D3HSSEREN     ((NUM_TX_LANE > 3)? 1'b1                           : 'd0),
  .D3TXHSPD      (1'b0),
  .D3DRXHS       ()
)            /* synthesis HS_MODE="TX" */
             /* synthesis DIR_PIN_DN3="OUTPUT" */
             /* synthesis DIR_PIN_DP3="OUTPUT" */
             /* synthesis DIR_PIN_DN2="OUTPUT" */
             /* synthesis DIR_PIN_DP2="OUTPUT" */
             /* synthesis DIR_PIN_DN1="OUTPUT" */
             /* synthesis DIR_PIN_DP1="OUTPUT" */
             /* synthesis DIR_PIN_CKN="OUTPUT" */
             /* synthesis DIR_PIN_CKP="OUTPUT" */
             /* synthesis DIR_PIN_DN0="OUTPUT" */
             /* synthesis DIR_PIN_DP0="OUTPUT" */
             /* synthesis FREQUENCY_PIN_HSBYTECLKS="25.1750" */
             /* synthesis FREQUENCY_PIN_CKN="201.4" */
             /* synthesis FREQUENCY_PIN_CKP="201.4" */
             /* synthesis FREQUENCY_PIN_CLKREF="25.175" */;


//tri1 VDDA;
//tri0 VSSA;
//tri1 VDD;
//tri0 VSS;
//tri0 DVSS;
//tri1 VDDPLL;
//tri0 VSSPLL;
//
//// M / (N*O)
////wire [4:0] CN = 5'b11100;    // 5
////wire [7:0] CM = 8'b1101_0010;  // 50
////wire [1:0] CO = 2'b00; // 1
//
///* synthesis translate_off */
//X150_X151 X150_X151_inst(
//	.VDDA			(VDDA),
//	.VSSA			(VSSA),
//	.VDD			(VDD),
//	.VSS			(VSS),
//	.DVSS			(DVSS),
//// PLL Interface pins
//	.VDDPLL			(VDDPLL),
//	.VSSPLL			(VSSPLL),
//	.PD_PLL			(~reset_n),
//	.TST			(4'b1001),
//	.CN			(CN),
//	.CM			(CM),
//	.CO			(CO),
//	.CLKREF			(refclk),
//	.LOCK			(pll_lock_o),
////Common Interface Pins
//	.HSEL			(1'b1),
//	.PD_DPHY		(!pll_lock_o | pd_dphy_i),
//	.PDBIAS			(1'b0),
//	.LB_EN			(1'b0),
//	.ENP_DESER		(1'b0),
//	.PDCKG			(1'b0),
//	.HS_16BIT_EN		((TX_GEAR == 16)? 1'd1 : 1'd0),
//	.TX_RCAL		(1'b0),
//	.RX_RCAL		(2'b0),
//// DATA0 Interface pins
//	.DP0			(d0_p_io),
//	.DN0			(d0_n_io),
//	.D0_DTXLPP		(dl0_txdata_lp_p_i),
//	.D0_DTXLPN		(dl0_txdata_lp_n_i),
//	.D0_TXLPEN		(dl0_txdata_lp_en_i),
////D0_TXLPPD,
//	.D0_DRXLPP		(),
//	.D0_DRXLPN		(),
//	.D0_RXLPEN		(1'b0),
//	.D0_DCDP		(),
//	.D0_DCDN		(),
//	.D0_CDEN		(1'b0),
//	.D0_TXHSPD		(1'b0),
//	.D0_TXHSEN		(dl0_txdata_hs_en_i),
//	.D0_HS_BYTE_CLKS	(txbyte_clkhs_o),
//	.D0_HSTX_DATA		(dl0_txdata_hs_i),
//	.D0_HS_SER_EN		(1'b1),
//	.D0_RXHSEN		(1'b0),
////D0_RXHSTHDB,
//	.D0_HS_DESER_EN		(1'b0),
//	.D0_HSRX_DATA		(),
//	.D0_HS_BYTE_CLKD	(), // Byteclk output from Lane0 deserializer
//	.D0_SYNC		(),
//	.D0_ERRSYNC		(),
//	.D0_NOSYNC		(),
//// DATA1 Interface pins
//	.DP1			(d1_p_o),
//	.DN1			(d1_n_o),
//	.D1_DTXLPP		(dl1_txdata_lp_p_i),
//	.D1_DTXLPN		(dl1_txdata_lp_n_i),
//	.D1_TXLPEN		(dl1_txdata_lp_en_i),
////D1_TXLPPD,
//	.D1_DRXLPP		(),
//	.D1_DRXLPN		(),
//	.D1_RXLPEN		(1'b0),
//	.D1_DCDP		(),
//	.D1_DCDN		(),
//	.D1_CDEN		(1'b0),
//	.D1_TXHSPD		(1'b0),
//	.D1_TXHSEN		(dl1_txdata_hs_en_i),
//	.D1_HSTX_DATA		(dl1_txdata_hs_i),
//	.D1_HS_SER_EN		(1'b1),
//	.D1_RXHSEN		(1'b0),
////D1_RXHSTHDB,
//	.D1_HS_DESER_EN		(1'b0),
//	.D1_HSRX_DATA		(),
//	.D1_SYNC		(),
//	.D1_ERRSYNC		(),
//	.D1_NOSYNC		(),
//
//// DATA2 Interface pins
//	.DP2			(d2_p_o),
//	.DN2			(d2_n_o),
//	.D2_DTXLPP		(dl2_txdata_lp_p_i),
//	.D2_DTXLPN		(dl2_txdata_lp_n_i),
//	.D2_TXLPEN		(dl2_txdata_lp_en_i),
////D2_TXLPPD,
//	.D2_DRXLPP		(),
//	.D2_DRXLPN		(),
//	.D2_RXLPEN		(1'b0),
//	.D2_DCDP		(),
//	.D2_DCDN		(),
//	.D2_CDEN		(1'b0),
//	.D2_TXHSPD		(1'b0),
//	.D2_TXHSEN		(dl2_txdata_hs_en_i),
//	.D2_HSTX_DATA		(dl2_txdata_hs_i),
//	.D2_HS_SER_EN		(1'b1),
//	.D2_RXHSEN		(1'b0),
////D2_RXHSTHDB,
//	.D2_HS_DESER_EN		(1'b0),
//	.D2_HSRX_DATA		(),
//	.D2_SYNC		(),
//	.D2_ERRSYNC		(),
//	.D2_NOSYNC		(),
//
//// DATA3 Interface pins
//	.DP3			(d3_p_o),
//	.DN3			(d3_n_o),
//	.D3_DTXLPP		(dl3_txdata_lp_p_i),
//	.D3_DTXLPN		(dl3_txdata_lp_n_i),
//	.D3_TXLPEN		(dl3_txdata_lp_en_i),
////D3_TXLPPD,
//	.D3_DRXLPP		(),
//	.D3_DRXLPN		(),
//	.D3_RXLPEN		(1'b0),
//	.D3_DCDP		(),
//	.D3_DCDN		(),
//	.D3_CDEN		(1'b0),
//	.D3_TXHSPD		(1'b0),
//	.D3_TXHSEN		(dl3_txdata_hs_en_i),
//	.D3_HSTX_DATA		(dl3_txdata_hs_i),
//	.D3_HS_SER_EN		(1'b1),
//	.D3_RXHSEN		(1'b0),
////D3_RXHSTHDB,
//	.D3_HS_DESER_EN		(1'b0),
//	.D3_HSRX_DATA		(),
//	.D3_SYNC		(),
//	.D3_ERRSYNC		(),
//	.D3_NOSYNC		(),
//
//// CLOCK Interface pins
//	.CKP			(c_p_io),
//	.CKN			(c_n_io),
//	.CLK_DTXLPP		(txclk_lp_p_i),
//	.CLK_DTXLPN		(txclk_lp_n_i),
//	.CLK_TXLPEN		(clk_lpen_i),
////CLK_TXLPPD,
//	.CLK_DRXLPP		(),
//	.CLK_DRXLPN		(),
//	.CLK_RXLPEN		(1'b0),
//	.CLK_DCDN		(),
//	.CLK_CDEN		(1'b0),
//	.CLK_TXHSPD		(1'b0),
//	.CLK_TXHSEN		(txclk_hsen_i),
//	.CLK_TXHSGATE		(txclk_hsgate_i),
//	.CLK_RXHSEN		(1'b0),
////CLK_RXHSTHDB,
//	.CLK_HS_BYTE		(),
//
////
///*D0_DTXHS,
//D1_DTXHS,
//D2_DTXHS,
//D3_DTXHS,
//CLK_DTXHS,*/
//
//	.D0_DRXHS		(),
//	.D1_DRXHS		(),
//	.D2_DRXHS		(),
//	.D3_DRXHS		(),
//	.CLK_DRXHS		()
//
//);

endmodule

