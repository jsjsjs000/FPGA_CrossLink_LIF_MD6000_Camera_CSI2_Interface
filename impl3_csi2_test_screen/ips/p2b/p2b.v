//===========================================================================
// Verilog file generated by Clarity Designer    10/02/2024    19:54:05  
// Filename  : p2b.v                                                
// IP package: Pixel to Byte Converter 1.3                           
// Copyright(c) 2017 Lattice Semiconductor Corporation. All rights reserved. 
//===========================================================================

module p2b #(

// TX_CSI2 ------------------                   
  parameter DSI_FORMAT  = 0,
  parameter DT          = 6'h24,
  parameter PIX_WIDTH   = 24,
// TX_CSI2 ------------------                   

// Specify number of target DPHY data lanes
  parameter NUM_TX_LANE = 2,

// Specify the target TX gear: 8/16
  parameter TX_GEAR      = 8,

 // Sets the number of incoming pixel per pixel clock
  parameter	NUM_PIX_LANE = 1,
                          

  parameter DATA_WIDTH   = 16   // Used to determine the bus width of output 
                                // Byte data. Always set to 16.  
)(
  input wire pix_clk_i,     // Input pixel clock              
  input wire byte_clk_i,    // Input byte clock
  input wire rst_n_i,       // Active low asynchronous system reset

  input wire fv_i,          // Input frame valid for parallel interface. 
  input wire lv_i,          // Input line valid sync for parallel interface.
  input wire dvalid_i,      // Input line valid sync for parallel interface.

  input wire [PIX_WIDTH-1:0] pix_data0_i,   // Input pixel data 0

  output wire fv_start_o,    // Pulse signal used to indicate frame start
  output wire fv_end_o,      // Pulse signal used to indicate frame end
  output wire lv_start_o,    // Pulse signal used to indicate line start
  output wire lv_end_o,      // Pulse signal used to indicate line end

// misc_on----
  output wire [5:0] data_type_o,    // Output data type
// misc_on---- 

// txfr_sig---
  input      c2d_ready_i,
  input wire txfr_en_i,     // Enable flag from outside the IP that 
                            // indicates that byte data can already be sent
                            // out from pixel2byte.
                            // 0 - do not send output byte data yet
  output wire txfr_req_o,   // Transmission request. When asserted, it indicates
                            // that valid data is ready to be sent out.
// txfr_sig---						

  output wire byte_en_o,  // Indicates valid output byte data.
  output wire [4*DATA_WIDTH-1:0] byte_data_o	// Output byte data.
);

// Local Parameters
localparam GEAR_16 = (TX_GEAR==16) ? 1 : 0;

// Wires
// Input to pixel2byte
wire txfr_en_w;

// Synchronizers wires
wire sync_pixclk_rstn_w;
wire sync_bytclk_rstn_w;

// Output of pixel2byte
wire p2b_vsync_start_w;
wire p2b_vsync_end_w;
wire p2b_hsync_start_w;
wire p2b_hsync_end_w;
wire p2b_fv_start_w;
wire p2b_fv_end_w;
wire p2b_lv_start_w;
wire p2b_lv_end_w;
wire p2b_odd_line_w;
wire p2b_txfr_req_w;
wire [5:0] p2b_data_type_w;
wire p2b_byte_en_w;
wire [4*DATA_WIDTH-1:0] p2b_byte_data_w;

// Wire Assignment
// Output port assignment
assign fv_start_o = p2b_fv_start_w;
assign fv_end_o = p2b_fv_end_w;
assign lv_start_o = p2b_lv_start_w;
assign lv_end_o = p2b_lv_end_w;

// misc_on----
assign data_type_o = p2b_data_type_w;
// misc_on----

assign txfr_req_o = p2b_txfr_req_w;

assign byte_en_o = p2b_byte_en_w;
assign byte_data_o = p2b_byte_data_w;

// Input assignment
assign txfr_en_w = txfr_en_i;

// Used to synchronize reset to pixel clock
p2b_synchronizer synchronizer_inst0 (
  .rstn   (rst_n_i),
  .clk    (pix_clk_i),
  .in     (rst_n_i),
  .out    (sync_pixclk_rstn_w)
);

// Used to synchronize reset to byte clock
p2b_synchronizer synchronizer_inst1 (
  .rstn   (rst_n_i),
  .clk    (byte_clk_i),
  .in     (rst_n_i),
  .out    (sync_bytclk_rstn_w)
);

p2b_pixel2byte pixel2byte_inst (
  .c2d_ready_i   (c2d_ready_i),
  .d_hs_rdy_i    (txfr_en_w),
  .d_hs_en_o     (p2b_txfr_req_w),
  .pix_clk       (pix_clk_i),
  .core_clk      (byte_clk_i),
  .reset_n       (sync_bytclk_rstn_w),
  .pix_rstn      (sync_pixclk_rstn_w), 
  .fv_i          (fv_i),          
  .lv_i          (lv_i),
  .dvalid_i      (dvalid_i),
  .pixdata_d0_i  (pix_data0_i),
  .fv_start_o     (p2b_fv_start_w),
  .fv_end_o       (p2b_fv_end_w),
  .lv_start_o     (p2b_lv_start_w),
  .lv_end_o       (p2b_lv_end_w),
  .odd_line_o     (p2b_odd_line_w),
  .byte_data_en_o (p2b_byte_en_w),
  .byte_data_o    (p2b_byte_data_w),	
  .data_type_o    (p2b_data_type_w) 
);

endmodule 
